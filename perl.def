# Push runs the first perl script among its dependencies, using all the other dependencies as arguments

## Just the command (refactor using this?)
PERLEX = perl -wf $(filter %.pl, $^)

PUSH = perl -wf $(filter %.pl, $^) $(filter-out %.pl, $^) > $@
PUSHRO = $(rm) $@; $(PUSHRO)

define PUSHRO
	- $(RM) $@
	$(PUSH)
	$(readonly)
endef

# Pushout adds the name of the output file as the first argument (assuming you only have one .pl dependency)
PUSHOUT = perl -wf $(filter %.pl, $^) $@ $(filter-out %.pl, $^) > $@

# Pushstar adds $*
PUSHSTAR = perl -wf $(filter %.pl, $^) $* $(filter-out %.pl, $^) > $@

PUSHARGS = perl -wf $(filter %.pl, $^) $1 $(filter-out %.pl, $^) > $@

# Pushon appends (pushes onto the file that's already there)
PUSHON = perl -wf $(filter %.pl, $^) $(filter-out %.pl, $^) >> $@

## Paragraph perl for short programs that operate on paragraphs
PPUSH = perl -00 -wf $(filter %.pl, $^) $(filter-out %.pl, $^) > $@

## Perl in place
## Target not made, use a fake
PIPUSH = perl -i -wf $(filter %.pl, $^) $(filter-out %.pl, $^)
